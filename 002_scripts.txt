============================================
ТЕХНИЧЕСКИЙ ПЛАН РЕАЛИЗАЦИИ: Model Cleanup
============================================

=== ОСНОВНЫЕ ТРЕБОВАНИЯ ИЗ ТЗ ===
• Назначение: удаление неиспользуемых элементов из проекта Revit
• Категории очистки: аннотации, типы линий, ViewFilters и др.
• UI: диалог с чекбоксами для выбора категорий очистки
• Вывод: лог операций и итоговый TaskDialog
• Приоритет: высокий
• Сложность: 1/5

=== ЭТАПЫ РЕАЛИЗАЦИИ ===

1. ПОДГОТОВКА СТРУКТУРЫ [✓]
   1.1. Создать папку Model_Cleanup.pushbutton
   1.2. Создать базовые файлы: script.py, icon.png, config.py
   1.3. Настроить импорты и базовую структуру скрипта

2. РАЗРАБОТКА КОНФИГУРАЦИИ [✓]
   2.1. Определить категории для очистки в config.py
   2.2. Создать константы и конфигурационные параметры
   2.3. Определить структуры данных для хранения результатов

3. СОЗДАНИЕ ПОЛЬЗОВАТЕЛЬСКОГО ИНТЕРФЕЙСА [✓]
   3.1. Разработать UI класс с использованием WPF
   3.2. Создать XAML разметку с чекбоксами
   3.3. Реализовать привязку данных и обработку событий
   3.4. Добавить валидацию выбора (минимум 1 категория)
   3.5. [NEW] Реализовано окно предпросмотра удаления элементов (PreviewDeleteWindow + preview_delete.xaml)

4. РЕАЛИЗАЦИЯ ЛОГИКИ ОЧИСТКИ [ЧАСТИЧНО]
   4.1. Создать классы/методы для каждой категории очистки:
       - Аннотации (пустые) [✓]
       - Типы линий (неиспользуемые) [ЧАСТИЧНО]
       - ViewFilters (неиспользуемые) [ЧАСТИЧНО]
   4.2. Реализовать методы поиска неиспользуемых элементов [✓]
   4.3. Реализовать методы удаления с транзакциями [✓]
   4.4. Добавить обработку ошибок [✓]
   4.5. [NEW] Dry-run: сначала показывается список кандидатов на удаление, только после подтверждения — удаление
   4.6. [TODO] Для стилей линий и фильтров требуется более глубокая проверка использования (иначе возможен крэш Revit)

5. СИСТЕМА ЛОГИРОВАНИЯ [ЧАСТИЧНО]
   5.1. Настроить logger через script.get_logger() [✓]
   5.2. Реализовать логирование операций: [✓]
       - Начало/конец процесса
       - Успешные удаления
       - Ошибки и исключения
   5.3. Создать форматированный вывод результатов [✓]
   5.4. [ПРОБЛЕМА] Если Revit аварийно завершает работу, логи не сохраняются. Лог-файл создаётся только если скрипт доходит до логирования.
   5.5. [РЕКОМЕНДАЦИЯ] Писать лог dry-run до начала транзакций.

6. ТЕСТИРОВАНИЕ [ЧАСТИЧНО]
   6.1. Провести тестирование на тестовом проекте [✓]
   6.2. Проверить все категории очистки [✓]
   6.3. Проверить обработку ошибок [✓]
   6.4. Проверить корректность логирования [ЧАСТИЧНО]
   6.5. [ПРОБЛЕМА] При удалении некоторых стилей линий/фильтров Revit аварийно закрывается, логи не сохраняются.

7. ФИНАЛИЗАЦИЯ [✗]
   7.1. Создать иконку 96×96 (уже сделано)
   7.2. Добавить документацию в код [TODO]
   7.3. Провести рефакторинг [TODO]
   7.4. Подготовить к коммиту [TODO]
   7.5. [NEW] Добавить предупреждение пользователю о рисках удаления стилей линий/фильтров
   7.6. [NEW] Добавить опцию "Только dry-run" (без удаления)

=== ВЫЯВЛЕННЫЕ ПРОБЛЕМЫ ===
• Удаление некоторых стилей линий/фильтров может привести к аварийному завершению Revit (ограничения Revit API).
• Логи не сохраняются при аварийном завершении.
• Не реализована глубокая проверка использования стилей линий (требуется для полной безопасности).

=== ПРЕДЛОЖЕНИЯ ПО ДОРАБОТКЕ ===
• Реализовать глубокую проверку использования стилей линий и фильтров.
• Добавить dry-run логирование до удаления.
• Добавить предупреждение пользователю и опцию "Только dry-run".
• Описать ограничения и риски в документации.

============================================

=== СТРУКТУРА ФАЙЛОВ ===
Model_Cleanup.pushbutton/
├── script.py      # основной скрипт
├── config.py      # конфигурация и константы
├── ui.py          # класс пользовательского интерфейса
├── icon.png       # иконка 96×96
└── README.md      # документация

=== ЗАВИСИМОСТИ ===
• pyRevit.forms
• Autodesk.Revit.DB
• System.Windows
• WPF компоненты

============================================ 