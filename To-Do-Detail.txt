# План разработки WasArchTools для pyRevit

## 1. Подготовка окружения (День 1)
1.1. Создание виртуального окружения ✓
    ✓ python3 -m venv .venv (на macOS используем python3)
    ✓ source .venv/bin/activate
    ✓ pip install --upgrade pip
    ⚠️ Примечание: pyrevit-cli и ironpython-stubs недоступны, но это некритично,
       так как основные компоненты PyRevit устанавливаются с Revit

1.2. Настройка репозитория ✓
    ✓ git init
    ✓ Создать .gitignore
    ✓ git branch -M main
    ✓ git add .
    ✓ git commit -m "Initial commit"
    ✓ git checkout -b dev

1.3. Проверка окружения ✓
    ✓ Создать тестовый скрипт Hello World:
        ✓ Создать WasArchTools.extension/WasArchTools.tab/Test.panel/
        ✓ Создать Hello.pushbutton/script.py
        ✓ Добавить базовый код с выводом сообщения
        ✓ Проверить что скрипт появляется в Revit и работает
    ✓ Настроена корректная работа с кодировкой (UTF-8)
    ✓ Базовое логирование работает

## 2. Базовая структура (День 1-2)
2.1. Создание структуры расширения ✓
    ✓ Переименовали Wassil.extension в WasArchTools.extension
    ✓ Создали WasArchTools.tab/
    ✓ Создали основные панели:
        ✓ Layouts.panel/
        ✓ Tags_Data.panel/
        ✓ Model_Cleanup.panel/
        ✓ Export.panel/
    ✓ Удалили старые неиспользуемые скрипты

2.2. Подготовка шаблонов ✓
    ✓ Создать lib/ для общих утилит:
        ✓ Создать lib/__init__.py
        ✓ Создать lib/utils.py для общих функций
    ✓ Создать базовый script.py с:
        ✓ Импорт Revit API
        ✓ Базовая обработка ошибок
        ✓ Пример транзакции
        ✓ Базовое логирование

## 3. Разработка высокоприоритетных скриптов (Дни 3-7)
3.1. Automation Apartments.pushbutton:
    ✓ Создать структуру скрипта
    ✓ Реализовать расчет площадей
    ✓ Добавить UI для коэффициентов
    ✓ Реализовать экспорт в CSV
    ✓ Тестирование на реальном проекте

3.2. Model Cleanup.pushbutton:
    □ Создать UI с чекбоксами
    □ Реализовать очистку по категориям
    □ Добавить логирование операций
    □ Тестирование на тестовом проекте

3.3. Batch PDF Print.pushbutton:
    □ Создать UI выбора листов
    □ Реализовать настройки PDF
    □ Добавить прогресс-бар
    □ Тестирование на реальном проекте

3.4. Room Numbering.pushbutton:
    □ Создать UI для шаблона номеров
    □ Реализовать логику нумерации
    □ Добавить валидацию ввода
    □ Тестирование на тестовом проекте

## 4. Разработка среднеприоритетных скриптов (Дни 8-12)
4.1. Export DWG_GOST.pushbutton:
    □ Создать UI выбора видов
    □ Реализовать маппинг слоев
    □ Добавить настройки экспорта
    □ Тестирование на реальном проекте

4.2. Copy Room Finish.pushbutton:
    □ Создать UI выбора помещений
    □ Реализовать копирование параметров
    □ Добавить валидацию
    □ Тестирование на тестовом проекте

## 5. Разработка низкоприоритетных скриптов (Дни 13-15)
5.1. Unused Materials Cleaner.pushbutton:
    □ Реализовать поиск материалов
    □ Добавить проверку использования
    □ Реализовать очистку
    □ Тестирование на тестовом проекте

5.2. Titleblock_Parameter_Checker.pushbutton:
    □ Создать UI шаблона
    □ Реализовать проверку параметров
    □ Добавить автозаполнение
    □ Тестирование на реальном проекте

## 6. Тестирование и документация (Дни 16-18)
6.1. Комплексное тестирование:
    □ Проверка на разных версиях Revit
    □ Тестирование всех сценариев
    □ Проверка производительности
    □ Сбор обратной связи

6.2. Документация:
    □ Создать README.md с описанием всех скриптов
    □ Добавить скриншоты интерфейса
    □ Описать процесс установки
    □ Создать примеры использования

## 7. Подготовка к релизу (Дни 19-20)
7.1. Финальная проверка:
    □ Проверить все зависимости
    □ Убедиться в работе всех скриптов
    □ Проверить документацию
    □ Создать релизную ветку

7.2. Релиз:
    □ Создать релизный тег
    □ Подготовить релизные заметки
    □ Создать установочный пакет
    □ Опубликовать релиз

## Заметки по реализации:
- Все операции с Revit API в транзакциях
- Обязательная обработка ошибок
- UI через pyRevit.forms или WPF
- Логирование через script.get_logger()
- Проверка ввода пользователя
- Откат изменений при ошибках

## Текущий статус:
✓ - Выполнено
□ - Ожидает выполнения
⚠️ - Требует внимания/альтернативного решения 