# -*- coding: utf-8 -*-
import os
import clr
clr.AddReference('PresentationFramework')
clr.AddReference('WindowsBase')
import System
from System.Windows import Window
from System.Windows.Markup import XamlReader
from System.IO import FileStream, FileMode
from System.Windows.Threading import DispatcherTimer

STATUSES = [
    u"–ö–æ–ø–∞–µ–º –∑–µ–º–ª—é –ø–æ–¥ –º–æ–¥–µ–ª—å—é‚Ä¶ üåè",
    u"–£–∫–ª–∞–¥—ã–≤–∞–µ–º —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç-–º–∞—Ç—Ä–∏—Ü—É‚Ä¶ üõñ",
    u"–ö–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º —Å–∏–ª–æ–≤–æ–µ –ø–æ–ª–µ‚Ä¶ üßô‚Äç‚ôÇÔ∏è",
    u"–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–Ω–∏ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏‚Ä¶ ‚úàÔ∏è",
    u"–î–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –ø–µ—á–µ–Ω—å–∫–∏‚Ä¶ üç™",
    u"–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∫–æ—Ñ–µ–∏–Ω–∞‚Ä¶ ‚òïÔ∏è",
    u"–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞–∏ÃÜ–Ω–∏–∫–∏‚Ä¶ ‚òïÔ∏è",
    u"–°—á–∏—Ç–∞–µ–º –º–æ–ª–µ–∫—É–ª—ã –±–µ—Ç–æ–Ω–∞‚Ä¶ üë∑‚Äç‚ôÇÔ∏è ü¶∫",
    u"–°–æ–µ–¥–∏–Ω—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–µ–π–º—ã‚Ä¶ üì∂",
    u"–ó–ê–°–ö–ê–ú–ò–õ–ò –ú–ê–ú–û–ù–¢–ê ü¶£ üòÇ",
]
FINAL_STATUS = u"–ò–¥–∏ —Ä–∞–±–æ—Ç–∞–π, –°–æ–ª–Ω—ã—à–∫–æ üåû"

class HelloWindow(Window):
    def __init__(self):
        xaml_path = os.path.join(os.path.dirname(__file__), 'ui.xaml')
        fs = FileStream(xaml_path, FileMode.Open)
        window = XamlReader.Load(fs)
        fs.Close()
        for attr in dir(window):
            if not attr.startswith('__') and not hasattr(self, attr):
                try:
                    setattr(self, attr, getattr(window, attr))
                except:
                    pass
        self.Content = window.Content
        self.Title = window.Title
        self.Width = window.Width
        self.Height = window.Height
        self.StatusText = window.FindName('StatusText')
        self.ProgressBar = window.FindName('ProgressBar')
        # –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        self._status_index = 0
        self.StatusText.Text = STATUSES[0]
        self.ProgressBar.Minimum = 0
        self.ProgressBar.Maximum = len(STATUSES)
        self.ProgressBar.Value = 1
        self._timer = DispatcherTimer()
        self._timer.Interval = System.TimeSpan.FromSeconds(2.5)
        self._timer.Tick += self._on_timer_tick
        self._timer.Start()

    def _on_timer_tick(self, sender, args):
        self._status_index += 1
        if self._status_index < len(STATUSES):
            self.StatusText.Text = STATUSES[self._status_index]
            self.ProgressBar.Value = self._status_index + 1
        else:
            self.StatusText.Text = FINAL_STATUS
            self.ProgressBar.Value = self.ProgressBar.Maximum
            self._timer.Stop()

def show_window():
    win = HelloWindow()
    win.ShowDialog() 